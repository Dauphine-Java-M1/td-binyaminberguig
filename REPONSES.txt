Binyamin Berguig (en duo avec Yohan Aidan)

TD00------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exercice 1:
4) Version de Maven 
Apache Maven 3.6.0

5) Le groupId est l'identifiant du groupe, à l'origine du projet. GroupId suit les mêmes règles de nommage que les packages Java (exemple : fr.masociete.monprojet), et on choisit généralement comme groupId le nom du top package du projet.

L'artifactId est l'identifiant du projet au sein de ce groupe.

L'artifactId est utilisé par défaut pour construire le nom de l'artefact final (exemple : pour un artifactId=monprojet, le nom du fichier jar généré sera monprojet-version.jar). 

6) Repertoire target contient le dossier classes et maven-status

8) class path est un parametre passe a une machine virtuelle java qui definit le chemin d'acces au repertoire ou se trouvent les classes et les packages java afin qu'elle les execute

Exercice 2:
1) erreur :  aucun attribut manifest principal dans target/td00-1.0-SNAPSHOT.jar

Exercie 3:
3) cela transforme sysout en System.out.println();

4) cela donne la possibilite de choisir entre la fonction toStr ou toString

5) creer la fonction main

6) permet de creer les getter et les setters toto

7) selectionne toute les occurences.


TD00 Bis---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Exercice 1:
2) les fichiers ayant recu des changements dignes d’intérêt par rapport à la version précédentes sont : pom.xml et PrimeCollection.java

5) on observe les modifications de code sur le terminal 

Exercice 2:
3) Gitk represente le fait que les deux dépots sont synchronisés par un message: "master-remote/origine/master"

5) le terminal affice le message : 	To https://github.com/Dauphine-Java-M1/td-binyaminberguig.git
					 ! [rejected]        master -> master (fetch first)
					error: impossible de pousser des références vers 'https://github.com/Dauphine-Java-M1/td-binyaminberguig.git'
					astuce: Les mises à jour ont été rejetées car la branche distante contient du travail que
					astuce: vous n'avez pas en local. Ceci est généralement causé par un autre dépôt poussé
					astuce: vers la même référence. Vous pourriez intégrer d'abord les changements distants
					astuce: (par exemple 'git pull ...') avant de pousser à nouveau.
					astuce: Voir la 'Note à propos des avances rapides' dans 'git push --help' pour plus d'information.
6) le fichier REPONSES.txt contient seulement les modification apportées au fichier cloné

7) En apportant des modifications sur la même ligne du fichier REPONSES.txt cela aurait créer un conflit et git nous aurait proposer de choisir entre les deux modifications apportées.


Exercice 3:
2) On observe une fenêtre JUnit qui s'ouvres et qui affiche un test valide 
En remplacant true par false, le test n'est plus valide
La methode AssertTrue sert a compare un objet avec une valeur prédéfinit.



TD01---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exercice 1:
1) cela fonctionne car java instancie un constructeur par defaut dés la création d'une classe

2) Cela ne fonctionne pas car les variables x et y sont en private et donc non accessible dans une autre classe.
Pour y remedier il faudrait mettre les attributs en public.

3) Il faut déclarer ses variables en private de façon à ce que le programme qui instancie la classe ne puisse ni voir ni modifier ces variables pour des raisons de sécurité. 

4) Un accesseur permet d'acceder a un attribut private de la classe.
Dans notre cas, on doit le faire car on veut que la classe TestPoint accede au attribut x et y.

5) Le probleme est que l'on a redefinit le constructeur pour qu'il prenne des paramétres.

6) Cela ne fonctionne toujours pas.

7) il faut creer une variable static et l'instancier dans le constructeur afin qu'il soit incrementé a chaque creation de Point.

8) Le compilateur sait quel constructeur appeler en fonction des parametres que on lui fournit.

Exercice 2:
1) Cela affiche true et false. le comparateur == prend en compte directement le referencement et non la valeur. true car p1 et p2 renvoi au meme objet tandis que p3 en est un troisiéme.

2) l'index de p2 existe alors que p2 n'a pas été ajouté.
resolution: sachant que indexOf utilise equals qui utilise == donc il faut changer de fonction et utiliser isSameAs().

Exercice 3 :
3) si l'on depasse la capacité fixée on obtient l'erreur suivante :"Index 4 out of bounds for length 4" il faudrait modifier la capacite en meme temps que l'on ajoute un point en redeclarant le tableau
  
5) si l'on met null en parametre de contains on obtient une erreur de meme lors de l'ajout 

6) pointCapacity n'a plus de raison d'être car une linkdlist n'a pas de limite, nbPoints devient la size() de notre collection et contains existe deja en tant que methode de LinkdList

Exercice 4 :
1) on peut soit renvoyer le nouveau point soit juste modifier les coordonées de ce dernier.

5) le probleme est que les 2 cercles sont translatés car ils utilisent le meme point, la solution est de retourne un nouveau point lors de la translation d'un point.

6) cela ne translate pas le cercle car on appelle la fonction translate de la classe point; pour modifier le cercle il faut utiliser directement la fonction translate de Circle.












